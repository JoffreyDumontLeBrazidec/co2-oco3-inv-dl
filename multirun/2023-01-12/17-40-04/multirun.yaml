hydra:
  run:
    dir: outputs/${now:%Y-%m-%d}/${now:%H-%M-%S}
  sweep:
    dir: multirun/${now:%Y-%m-%d}/${now:%H-%M-%S}
    subdir: ${hydra.job.num}
  launcher:
    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
  sweeper:
    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
    max_batch_size: null
    params: null
  help:
    app_name: ${hydra.job.name}
    header: '${hydra.help.app_name} is powered by Hydra.

      '
    footer: 'Powered by Hydra (https://hydra.cc)

      Use --hydra-help to view Hydra specific help

      '
    template: '${hydra.help.header}

      == Configuration groups ==

      Compose your configuration from those groups (group=option)


      $APP_CONFIG_GROUPS


      == Config ==

      Override anything in the config (foo.bar=value)


      $CONFIG


      ${hydra.help.footer}

      '
  hydra_help:
    template: 'Hydra (${hydra.runtime.version})

      See https://hydra.cc for more info.


      == Flags ==

      $FLAGS_HELP


      == Configuration groups ==

      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
      to command line)


      $HYDRA_CONFIG_GROUPS


      Use ''--cfg hydra'' to Show the Hydra config.

      '
    hydra_help: ???
  hydra_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][HYDRA] %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
    root:
      level: INFO
      handlers:
      - console
    loggers:
      logging_example:
        level: DEBUG
    disable_existing_loggers: false
  job_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
      file:
        class: logging.FileHandler
        formatter: simple
        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
    root:
      level: INFO
      handlers:
      - console
      - file
    disable_existing_loggers: false
  env: {}
  mode: MULTIRUN
  searchpath: []
  callbacks: {}
  output_subdir: .hydra
  overrides:
    hydra:
    - hydra.mode=MULTIRUN
    task:
    - data.path.train.name=2km_S_pBer
    - model=segmentation
    - training.max_epochs=50
    - data.output.max_w=4
    - data.output.curve=linear
  job:
    name: main
    chdir: null
    override_dirname: data.output.curve=linear,data.output.max_w=4,data.path.train.name=2km_S_pBer,model=segmentation,training.max_epochs=50
    id: ???
    num: ???
    config_name: config
    env_set: {}
    env_copy: []
    config:
      override_dirname:
        kv_sep: '='
        item_sep: ','
        exclude_keys: []
  runtime:
    version: 1.3.1
    version_base: '1.3'
    cwd: /cerea_raid/users/dumontj/dev/coco2/dl
    config_sources:
    - path: hydra.conf
      schema: pkg
      provider: hydra
    - path: /cerea_raid/users/dumontj/dev/coco2/dl/cfg
      schema: file
      provider: main
    - path: ''
      schema: structured
      provider: schema
    output_dir: ???
    choices:
      augmentations: default
      model: segmentation
      training: default
      data: default
      data/split: default
      data/output: segmentation
      data/input: segmentation
      hydra/env: default
      hydra/callbacks: null
      hydra/job_logging: default
      hydra/hydra_logging: default
      hydra/hydra_help: default
      hydra/help: default
      hydra/sweeper: basic
      hydra/launcher: basic
      hydra/output: default
  verbose: false
data:
  split:
    type: regular
    train:
      ratio: 0.85
  input:
    chan_0:
      type: xco2
      add: ${data.input.chan_0.type}_add
    chan_1:
      type: None
      add: ${data.input.chan_1.type}_add
    chan_2:
      type: None
      add: ${data.input.chan_2.type}_add
  output:
    curve: linear
    min_w: 0.01
    max_w: 4
    param_curve: 1
  path:
    directory: /libre/dumontj/coco2/dl-input
    train:
      name: 2km_S_pBer
      nc: 2d_train_valid_dataset.nc
    valid:
      name: ${data.path.train.name}
      nc: 2d_train_valid_dataset.nc
    test:
      name: ${data.path.train.name}
      nc: 2d_test_dataset.nc
training:
  batch_size: 32
  learning_rate: 0.001
  max_epochs: 50
  init_weights: random
  optimiser: adam
callbacks:
  model_checkpoint:
    __target__: true
  learning_rate_monitor:
    __target__: true
    factor: 0.5
    patience: 20
    min_delta: 0.005
    min_lr: 5.0e-05
    cooldown: 0
  wandb:
    __target__: true
dir_res: res
exp_name: ${now:%Y-%m-%d}_${now:%H-%M-%S}
seed: 42
sweep: false
model:
  type: segmentation
  name: Unet_efficientnetb0
  loss_func: pixel_weighted_cross_entropy
  dropout_rate: 0.2
augmentations:
  rot:
    range: 180
  shift:
    range: 0
  flip:
    bool: true
  shear:
    range: 90
  zoom:
    range: 0.2
